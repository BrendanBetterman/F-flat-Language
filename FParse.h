// f_flat Grammar 2022
// 
// Parser Class Definition File

// SHELL GENERATED BY PARSERGEN VERSION 5.0.4

#ifndef PARSER
#define PARSER

#include <string>
using namespace std;

#include "FScan.h" // scanner class definition

#include "FCodeGen.h" // code generator class definition

class Parser
{
public:

	Parser();

	void SystemGoal();

private:
	//Math stack
	vector<Math> Equation; 
	Token savedToken;
	bool  tokenAvailable;

	void SyntaxError(Token t, string msg);

	Token NextToken();

	void Match(Token t);

	void VarDec(ExprKind& expr);

	void VarDecList(ExprKind& expr);
	string kindToStr(ExprKind& k);
	void VarDecListTail(ExprKind& expr);

	void VarDecTail();

	void DecTail(ExprRec& expr);

	void Type(ExprRec& expr);

	void Literal(ExprRec& expr);

	void MultOp(OpRec& op);

	void FactorTail();

	void Primary(ExprRec& result);

	void AddOp(OpRec& op);

	void ExprTail();

	void Factor(ExprRec& expr);

	void RelOp(ConRec& con);

	void RelTail();

	void Relational();

	void AndTail();

	void Negation();

	void CondTail();

	void AndCond();

	void VarInit();

	void FelseClause();

	void Condition(ExprRec& Lexpr,ConRec& con, ExprRec& Rexpr);

	void ForStmt();

	void DoFwhileStmt();

	void WhileStmt();

	void FifStmt();

	void ItemListTail();

	void ItemList(ExprRec& expr);

	void VariableTail(ExprRec& expr);

	void VarListTail(ExprRec& expr);

	void VarList(ExprRec& expr);

	void Expression(ExprRec& result);
	//void Expression();

	void Variable(ExprRec& expr);

	void FoutlnStmt(ExprRec& expr);

	void FoutStmt(ExprRec& expr);

	void FinStmt(ExprRec& expr);

	void AssignStmt(ExprRec& expr);

	void Declaration(ExprRec& expr);

	void StructStmt();

	void SimpleStmt(ExprRec& expr);

	void StmtTail(ExprRec& expr);

	void Statement(ExprRec& expr);

	void StmtList(ExprRec& expr);

	void Program();

}; // end of Parser class

#endif
